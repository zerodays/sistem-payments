// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5f\x6f\xe2\x38\x10\x7f\xf7\xa7\x98\xc7\xed\x49\x04\x68\xbb\x3d\xae\x88\x87\xb4\xb0\x2c\x77\x40\x10\xa1\x7b\xa7\xab\x4e\xc8\x49\x26\x89\xb5\x8e\x9d\xf5\x38\xe5\xb8\x4f\x7f\xb2\x43\x2a\x5a\xa9\xdd\xc2\x4b\x34\xfe\xfd\x99\x7f\xf6\x23\xa1\x79\x42\xf3\x0f\x1b\x43\x98\x65\x06\x89\x40\x2b\x38\x94\x22\x2d\xc1\x96\x08\xed\x31\x48\x41\x16\x15\x05\x6c\xb9\x88\x77\xb3\xf5\x3e\x9c\x4e\xb7\xb3\x38\x86\x09\x0c\x02\xff\x67\x6c\x0c\x1b\x6d\xec\xfb\xec\x4d\xb4\xdd\xc1\x04\x46\x83\xd1\x90\xb1\xc7\x8c\x5b\x9e\x70\x42\x67\x3e\x3d\x7d\x03\xa1\xb5\x42\x15\x14\xc0\x17\x6d\x40\xe9\x03\x68\x25\x8f\x50\x6b\xb2\x85\x41\xfa\x21\x41\x10\x50\x53\xd7\xda\x58\xcc\x02\xf6\x35\x8a\x9d\xa4\xd4\x29\x97\xa5\x26\xdb\x79\x7c\xbe\xbe\xba\x64\x0f\xf1\x6c\x0b\x93\x67\x32\xdb\x84\x71\xfc\x67\xb4\x9d\x9e\xc7\xa6\x77\xfb\x75\xb8\x9a\x9d\x87\xd8\x18\xe2\x78\x09\x95\xce\x10\xac\x86\x04\xa1\x21\xcc\xe0\x20\x6c\x79\x96\x48\x00\xdf\xb8\x14\x99\x87\x11\x70\x83\xb7\x6c\x0c\xbf\x40\x26\x88\x27\x12\xa1\x07\x6b\xed\x64\x7c\xd0\xe0\x8f\x46\x18\x17\x0c\xe5\x81\x1f\xc9\xeb\x7f\xa2\xef\xa2\x86\x27\x34\x22\x17\x29\xb7\x42\xab\x0b\x0f\xf6\x91\x63\x2f\xe5\xaf\xe0\x6d\x1c\x6c\xc9\xad\xef\x6e\x8a\xc6\xb6\x54\x84\xda\x20\xa1\xb2\x98\x41\xe2\x10\xc8\xc6\x00\x5d\xfb\x0f\x9c\x80\x44\xa1\xda\x43\x0e\xd6\x34\xe4\x90\xf7\xe1\x0b\xbf\xbc\x91\xf2\xc3\x8e\x42\xab\x17\x9e\xde\xef\x6c\xe4\x6f\x7b\x02\x57\xd9\x39\xd2\x0d\x0d\x14\xaf\xda\x94\x2b\x6e\xd3\x12\xc9\x03\xb4\x42\x10\xea\x75\xa9\x17\x2c\x8e\x97\xfb\x55\x34\x75\x23\x3b\x35\x9b\xb1\x47\xa9\x0b\x72\x8b\xb4\x12\x4a\x54\x4d\x05\x52\x17\x20\xf1\x09\x65\xc0\x96\xd1\x7c\xbf\x9c\x7d\x9b\x2d\xdd\xba\xfa\xe1\x96\xba\x91\x99\x83\x90\x1b\xee\xc1\x08\x6b\x51\xb9\x51\xe7\x42\x62\xc0\xbe\x2c\x96\xb3\xfd\x32\x9a\xcf\x17\xeb\x39\x4c\x5c\xee\xf8\x3e\x2d\xd5\x8a\xb4\x44\xf8\x44\x36\xd3\x8d\xbd\x08\xd8\x7d\xb4\x8e\xa3\x8f\xa8\xb8\x0e\x3a\x09\xa9\x0b\x61\x03\xa1\x7d\xba\x8b\xdd\x6b\x62\x1b\x7c\xd8\xba\x1a\xb2\x51\x9e\x62\x7e\x73\xd3\xfb\xed\x7a\x30\xec\x5d\xa7\x7c\xd8\x1b\x5d\xdd\x24\xbd\x2c\x19\x24\xc3\xab\xcb\xeb\x04\xd3\xbc\x27\x29\xe8\x24\x6f\x87\x83\xcb\x5f\x3f\xfb\x1b\xca\x6d\xd9\x95\x09\x42\x59\x7d\x76\x57\x7d\x42\xdc\x3c\xd7\xd5\xf6\x6d\x13\xee\xbe\xfa\xeb\x55\x50\xbf\xe6\xc7\x0a\x95\xf5\xc2\x4e\x6d\xf2\xd6\xcf\x55\x79\xba\xc6\x90\x6b\xd3\xda\x49\x5d\x14\x42\x15\x3f\xe1\xad\xf8\xbf\x40\xe2\x3f\x04\x9d\x77\x59\xb5\xf4\x04\x73\x6d\x10\x84\x25\x30\xda\x72\xb7\x4b\x42\xc1\xea\x2e\x60\xab\xf0\xaf\x7d\xbc\xf8\xdb\xad\xc3\x70\x70\x92\xe0\xc5\x47\x15\x32\x7e\xa4\x56\x23\x9c\x9f\x4b\xf8\x25\x52\x4d\x95\xa0\x71\x4a\x1d\xa3\x53\x23\xd7\xc6\xef\x88\x75\xcb\xbd\x0b\xef\xff\x78\xd8\xc4\x2d\x9f\x3d\x56\x22\x35\xda\xed\xb7\x48\xd1\x6f\xe5\x83\x91\x6d\x2b\xb4\x2d\xd1\xb4\xcf\xc9\x0b\x90\x7f\xaa\xe2\xd3\x80\x4b\x6b\xeb\xdb\x7e\xff\xf9\x4d\xbb\x1d\x0d\x46\x83\x3e\xaf\x45\xff\x69\xc8\x36\xdb\xe8\xf7\xd9\xfd\xee\x3d\xec\x65\x87\xfd\x3f\x00\x00\xff\xff\xdc\x2d\xfc\xda\xde\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1502, mode: os.FileMode(420), modTime: time.Unix(1609270087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4d\x4e\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x82\xd4\x9e\x80\x95\x0b\x53\x88\x70\x92\x2a\x99\x0a\xca\x26\x32\xcd\x20\x8a\x92\xda\xca\x0f\x52\x6e\x8f\x70\x42\x17\x2d\x48\x59\x30\x3b\xcb\xef\x7b\xf6\x7c\xcb\x25\xd8\xbe\x56\x02\xf7\x06\x6f\x87\x5a\x8e\x5d\x8b\x46\xf6\x72\xf8\x94\x12\x5e\x1a\xf8\xc6\x7d\xc8\xbe\x83\x7f\xb7\xad\xa8\xdb\x8c\x34\x13\x58\xaf\x0c\x9d\x00\x75\xa5\x00\xe0\x50\xe2\x67\x72\xca\x22\x6d\xb0\xc9\xa2\x58\x67\x3b\x3c\xd2\x6e\x11\x22\xa1\xa4\x08\xc1\x28\x61\xba\xa7\x0c\x17\x93\xa4\x8c\x64\x6b\xcc\x42\x05\xc4\xd6\xae\x3f\x76\xe1\x66\x06\x12\x1e\xb1\x83\x4c\x5f\x59\xa5\xa9\x21\x9d\xe0\x8e\xd6\x7a\x6b\x18\x6b\x6d\x72\x9a\x8a\x4b\xdb\x49\x51\xf6\x02\x80\xa3\x98\x72\xd6\xf1\x06\x4f\x11\x3f\x84\x23\x5e\xd2\x84\xce\x8a\x03\x31\xb6\xff\x45\xa8\xeb\x1b\xa5\x7e\x95\x3a\x72\x9d\x83\xd4\xbe\x72\x43\xb0\xeb\x7c\x75\xa6\xb4\x6f\xa5\x29\x26\x66\xbe\xd6\x40\x8d\x39\xa6\x67\xbe\x14\xf4\x1f\x5a\x67\x6c\x7f\x22\xbe\x35\x7c\x05\x00\x00\xff\xff\x8c\xc4\x81\x84\x5b\x02\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 603, mode: os.FileMode(420), modTime: time.Unix(1609248204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
