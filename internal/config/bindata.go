// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5f\x6f\xe2\x38\x10\x7f\xf7\xa7\x98\xc7\xed\x49\x04\x68\xbb\xbd\x5e\x11\x0f\x69\x61\x59\xee\x80\x20\x42\xf7\x4e\x57\x9d\x90\x93\x4c\x12\x6b\x1d\x3b\xeb\x71\xe0\xb8\x4f\x7f\xb2\x43\x2a\x5a\xa9\xdd\xc2\x4b\x34\xfe\xfd\x99\x7f\xf6\x13\xa1\xd9\xa3\xf9\x87\x8d\x20\xcc\x32\x83\x44\xa0\x15\x1c\x4a\x91\x96\x60\x4b\x84\xf6\x18\xa4\x20\x8b\x8a\x02\xb6\x98\xc7\xdb\xe9\x6a\x17\x4e\x26\x9b\x69\x1c\xc3\x18\x06\x81\xff\x33\x36\x82\xb5\x36\xf6\x7d\xf6\x3a\xda\x6c\x61\x0c\xb7\x83\xdb\x01\x63\x4f\x19\xb7\x3c\xe1\x84\xce\x7c\x72\xfa\x06\x42\x6b\x85\x2a\x28\x80\x2f\xda\x80\xd2\x07\xd0\x4a\x1e\xa1\xd6\x64\x0b\x83\xf4\x43\x82\x20\xa0\xa6\xae\xb5\xb1\x98\x05\xec\x6b\x14\x3b\x49\xa9\x53\x2e\x4b\x4d\xb6\xf3\xf8\x7c\x7d\x75\xc9\x1e\xe3\xe9\x06\xc6\xcf\x64\xb6\x0e\xe3\xf8\xcf\x68\x33\x39\x8f\x4d\xee\x77\xab\x70\x39\x3d\x0f\xb1\x11\xc4\xf1\x02\x2a\x9d\x21\x58\x0d\x09\x42\x43\x98\xc1\x41\xd8\xf2\x2c\x91\x00\xbe\x71\x29\x32\x0f\x23\xe0\x06\xef\xd8\x08\x7e\x81\x4c\x10\x4f\x24\x42\x0f\x56\xda\xc9\xf8\xa0\xc1\x1f\x8d\x30\x2e\x18\xca\x03\x3f\x92\xd7\xff\x44\xdf\x45\x0d\x7b\x34\x22\x17\x29\xb7\x42\xab\x0b\x0f\xf6\x91\x63\x2f\xe5\xaf\xe0\x6d\x1c\x6c\xc9\xad\xef\x6e\x8a\xc6\xb6\x54\x84\xda\x20\xa1\xb2\x98\x41\xe2\x10\xc8\x46\x00\x5d\xfb\x0f\x9c\x80\x44\xa1\xda\x43\x0e\xd6\x34\xe4\x90\x0f\xe1\x0b\xbf\xbc\x91\xf2\xc3\x8e\x42\xab\x17\x9e\xde\xef\x6c\xe4\x6f\x7b\x02\x57\xd9\x39\xd2\x0d\x0d\x14\xaf\xda\x94\x2b\x6e\xd3\x12\xc9\x03\xb4\x42\x10\xea\x75\xa9\x17\x2c\x8e\x17\xbb\x65\x34\x71\x23\x3b\x35\x9b\xb1\x27\xa9\x0b\x72\x8b\xb4\x14\x4a\x54\x4d\x05\x52\x17\x20\x71\x8f\x32\x60\x8b\x68\xb6\x5b\x4c\xbf\x4d\x17\x6e\x5d\xfd\x70\x4b\xdd\xc8\xcc\x41\xc8\x0d\xf7\x60\x84\xb5\xa8\xdc\xa8\x73\x21\x31\x60\x5f\xe6\x8b\xe9\x6e\x11\xcd\x66\xf3\xd5\x0c\xc6\x2e\x77\x7c\x9f\x96\x6a\x45\x5a\x22\x7c\x22\x9b\xe9\xc6\x5e\x04\xec\x21\x5a\xc5\xd1\x47\x54\x5c\x07\x9d\x84\xd4\x85\xb0\x81\xd0\x3e\xdd\xf9\xf6\x35\xb1\x0d\x3e\x6e\x5c\x0d\xd9\x6d\x9e\x62\x7e\x73\xd3\xfb\xed\x7a\x30\xec\x5d\xa7\x7c\xd8\xbb\xbd\xba\x49\x7a\x59\x32\x48\x86\x57\x97\xd7\x09\xa6\x79\x4f\x52\xd0\x49\xde\x0d\x07\x97\xbf\x7e\xf6\x37\x94\xdb\xb2\x2b\x13\x84\xb2\xfa\xec\xae\xfa\x84\xb8\x79\xae\xab\xed\xdb\x3a\xdc\x7e\xf5\xd7\xab\xa0\x7e\xcd\x8f\x15\x2a\xeb\x85\x9d\xda\xf8\xad\x9f\xab\xf2\x74\x8d\x21\xd7\xa6\xb5\x93\xba\x28\x84\x2a\x7e\xc2\x5b\xf2\x7f\x81\xc4\x7f\x08\x3a\xef\xb2\x6a\xe9\x09\xe6\xda\x20\x08\x4b\x60\xb4\xe5\x6e\x97\x84\x82\xe5\x7d\xc0\x96\xe1\x5f\xbb\x78\xfe\xb7\x5b\x87\xe1\xe0\x24\xc1\x8b\x8f\x2a\x64\xfc\x48\xad\x46\x38\x3b\x97\xf0\x4b\xa4\x9a\x2a\x41\xe3\x94\x3a\x46\xa7\x46\xae\x8d\xdf\x11\xeb\x96\x7b\x1f\x3e\xfc\xf1\xb8\x8e\x5b\x3e\x7b\xaa\x44\x6a\xb4\xdb\x6f\x91\xa2\xdf\xca\x47\x23\xdb\x56\x68\x5b\xa2\x69\x9f\x93\x17\x20\xff\x54\xc5\xa7\x01\x97\xd6\xd6\x77\xfd\xfe\xf3\x9b\x76\xe7\x1e\xcc\x3e\xaf\x45\x7f\x3f\x64\xeb\x4d\xf4\xfb\xf4\x61\xfb\x1e\xf6\xb2\xc3\xfe\x1f\x00\x00\xff\xff\xdf\x08\x4c\x54\xde\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1502, mode: os.FileMode(420), modTime: time.Unix(1609271888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4d\x4e\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x82\xd4\x9e\x80\x95\x0b\x53\x88\x70\x92\x2a\x99\x0a\xca\x26\x32\xcd\x20\x8a\x92\xda\xca\x0f\x52\x6e\x8f\x70\x42\x17\x2d\x48\x59\x30\x3b\xcb\xef\x7b\xf6\x7c\xcb\x25\xd8\xbe\x56\x02\xf7\x06\x6f\x87\x5a\x8e\x5d\x8b\x46\xf6\x72\xf8\x94\x12\x5e\x1a\xf8\xc6\x7d\xc8\xbe\x83\x7f\xb7\xad\xa8\xdb\x8c\x34\x13\x58\xaf\x0c\x9d\x00\x75\xa5\x00\xe0\x50\xe2\x67\x72\xca\x22\x6d\xb0\xc9\xa2\x58\x67\x3b\x3c\xd2\x6e\x11\x22\xa1\xa4\x08\xc1\x28\x61\xba\xa7\x0c\x17\x93\xa4\x8c\x64\x6b\xcc\x42\x05\xc4\xd6\xae\x3f\x76\xe1\x66\x06\x12\x1e\xb1\x83\x4c\x5f\x59\xa5\xa9\x21\x9d\xe0\x8e\xd6\x7a\x6b\x18\x6b\x6d\x72\x9a\x8a\x4b\xdb\x49\x51\xf6\x02\x80\xa3\x98\x72\xd6\xf1\x06\x4f\x11\x3f\x84\x23\x5e\xd2\x84\xce\x8a\x03\x31\xb6\xff\x45\xa8\xeb\x1b\xa5\x7e\x95\x3a\x72\x9d\x83\xd4\xbe\x72\x43\xb0\xeb\x7c\x75\xa6\xb4\x6f\xa5\x29\x26\x66\xbe\xd6\x40\x8d\x39\xa6\x67\xbe\x14\xf4\x1f\x5a\x67\x6c\x7f\x22\xbe\x35\x7c\x05\x00\x00\xff\xff\x8c\xc4\x81\x84\x5b\x02\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 603, mode: os.FileMode(420), modTime: time.Unix(1609248204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
