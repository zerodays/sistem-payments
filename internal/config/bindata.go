// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package config generated by go-bindata.// sources:
// configs/config.ini
// configs/migrations/01_initial.up.sql
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdf\x6f\xfa\x36\x10\x7f\xf7\x5f\x71\x8f\xed\xa4\x06\xda\x6d\x12\x2a\xe2\x21\x85\x94\xb2\x05\x82\x08\x74\xd3\xd0\x84\x4c\x72\x24\x56\x1d\x3b\xf5\x39\x30\xf6\xd7\x4f\x76\xa0\xa2\xd5\xda\x6f\xe1\x05\x9d\x3f\x3f\x8e\xfb\x9c\xbd\x26\x34\x7b\x34\x7f\xb3\x3e\x84\x79\x6e\x90\x08\xb4\x82\x43\x29\xb2\x12\x6c\x89\xd0\x1e\x83\x14\x64\x51\x51\xc0\xe2\x49\xba\x8c\x66\x9b\x70\x34\x5a\x44\x69\x0a\x03\xe8\x06\xfe\xcb\x58\x1f\xe6\xda\xd8\xaf\xd9\xf3\x64\xb1\x84\x01\xf4\xba\xbd\x5b\xc6\xd6\x39\xb7\x7c\xcb\x09\x9d\xf9\xe8\xf4\x1b\x08\xad\x15\xaa\xa0\x00\x1e\xb5\x01\xa5\x0f\xa0\x95\x3c\x42\xad\xc9\x16\x06\xe9\x55\x82\x20\xa0\xa6\xae\xb5\xb1\x98\x07\xec\x29\x49\x9d\xa4\xd4\x19\x97\xa5\x26\x7b\xf6\xf8\xf5\x97\x9f\xef\xd8\x2a\x8d\x16\x30\x78\x23\xb3\x79\x98\xa6\x7f\x24\x8b\xd1\x65\x6d\xf4\xb0\x99\x85\xd3\xe8\xb2\xc4\xfa\x90\xa6\x31\x54\x3a\x47\xb0\x1a\xb6\x08\x0d\x61\x0e\x07\x61\xcb\x8b\x46\x02\x78\xe6\x52\xe4\x1e\x46\xc0\x0d\xde\xb3\x3e\xfc\x04\xb9\x20\xbe\x95\x08\x37\x30\xd3\x4e\xc6\x17\x0d\xbe\x36\xc2\xb8\x62\x28\x0f\xfc\x48\x5e\xff\x8a\x5e\x44\x0d\x7b\x34\x62\x27\x32\x6e\x85\x56\xd7\x1e\xec\x2b\xc7\x9b\x8c\x7f\x80\xb7\x75\xb0\x25\xb7\x7e\xba\x19\x1a\xdb\x52\x11\x6a\x83\x84\xca\x62\x0e\x5b\x87\x40\xd6\x07\x38\x8f\xff\xc0\x09\x48\x14\xaa\x3d\xe4\x60\x4d\x43\x0e\x39\x0c\xdf\xf9\xed\x1a\x29\xbf\xed\x28\xb4\x7a\xe7\xe9\xfd\x2e\x22\xff\xdc\x13\xb8\xca\x2f\x91\x2e\x34\x50\xbc\x6a\x5b\xae\xb8\xcd\x4a\x24\x0f\xd0\x0a\x41\xa8\x8f\x7f\xf5\x9a\xa5\x69\xbc\x99\x26\x23\x17\xd9\x69\xd8\x8c\xad\xa5\x2e\xc8\x2d\xd2\x54\x28\x51\x35\x15\x48\x5d\x80\xc4\x3d\xca\x80\xc5\xc9\x78\x13\x47\xcf\x51\xec\xd6\xd5\x87\x5b\xea\x46\xe6\x0e\x42\x2e\xdc\x83\x11\xd6\xa2\x72\x51\xef\x84\xc4\x80\x3d\x4e\xe2\x68\x13\x27\xe3\xf1\x64\x36\x86\x81\xeb\x1d\xbf\xa6\x65\x5a\x91\x96\x08\x57\x64\x73\xdd\xd8\xeb\x80\x0d\x93\x59\x9a\xfc\xaf\xca\x9c\xdb\xf2\x6c\x05\x42\x59\x7d\x71\x5f\xbc\x34\x37\x6f\xda\x6d\xef\xf3\x70\xf9\xe4\x57\xbc\xa0\x4e\xcd\x8f\x15\x2a\x4b\x81\xd4\x85\x53\x1b\x7c\xf6\x71\xfd\x9e\xae\x12\xec\xb4\x69\xed\xa4\x2e\x0a\xa1\x8a\x1f\xf0\xa6\xfc\x1f\x20\xf1\x2f\x82\xde\x9d\xbb\x6a\xe9\x5b\xdc\x69\x83\x20\x2c\x81\xd1\x96\xbb\x3c\x85\x82\xe9\x43\xc0\xa6\xe1\x9f\x9b\x74\xf2\x97\x8b\xe4\xb6\x7b\x92\xe0\xc5\x77\x15\x72\x7e\xa4\x56\x23\x1c\x5f\x4a\xf8\x20\x55\x53\x6d\xd1\x38\xa5\x33\xe3\xac\x46\x6e\x8c\x2f\x88\x75\xcb\x7d\x08\x87\xbf\xaf\xe6\x69\xcb\x67\xeb\x4a\x64\x46\xbb\x1d\x13\x19\xfa\xcd\x58\x19\xd9\x8e\x42\xdb\x12\x4d\x7b\xa5\xdf\x81\xfc\x73\x91\x6e\x56\x0b\xb7\x28\xa5\xb5\xf5\x7d\xa7\xf3\xf6\xae\xdc\xf7\xba\xbd\x6e\x87\xd7\xa2\xb3\xbf\x65\xf3\x45\xf2\x5b\x34\x5c\x7e\x85\xbd\x3b\x63\xff\x0b\x00\x00\xff\xff\xa3\xb7\x2d\xd0\x62\x05\x00\x00")

func configIniBytes() ([]byte, error) {
	return bindataRead(
		_configIni,
		"config.ini",
	)
}

func configIni() (*asset, error) {
	bytes, err := configIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.ini", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1609259242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4d\x4e\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x82\xd4\x9e\x80\x95\x0b\x53\x88\x70\x92\x2a\x99\x0a\xca\x26\x32\xcd\x20\x8a\x92\xda\xca\x0f\x52\x6e\x8f\x70\x42\x17\x2d\x48\x59\x30\x3b\xcb\xef\x7b\xf6\x7c\xcb\x25\xd8\xbe\x56\x02\xf7\x06\x6f\x87\x5a\x8e\x5d\x8b\x46\xf6\x72\xf8\x94\x12\x5e\x1a\xf8\xc6\x7d\xc8\xbe\x83\x7f\xb7\xad\xa8\xdb\x8c\x34\x13\x58\xaf\x0c\x9d\x00\x75\xa5\x00\xe0\x50\xe2\x67\x72\xca\x22\x6d\xb0\xc9\xa2\x58\x67\x3b\x3c\xd2\x6e\x11\x22\xa1\xa4\x08\xc1\x28\x61\xba\xa7\x0c\x17\x93\xa4\x8c\x64\x6b\xcc\x42\x05\xc4\xd6\xae\x3f\x76\xe1\x66\x06\x12\x1e\xb1\x83\x4c\x5f\x59\xa5\xa9\x21\x9d\xe0\x8e\xd6\x7a\x6b\x18\x6b\x6d\x72\x9a\x8a\x4b\xdb\x49\x51\xf6\x02\x80\xa3\x98\x72\xd6\xf1\x06\x4f\x11\x3f\x84\x23\x5e\xd2\x84\xce\x8a\x03\x31\xb6\xff\x45\xa8\xeb\x1b\xa5\x7e\x95\x3a\x72\x9d\x83\xd4\xbe\x72\x43\xb0\xeb\x7c\x75\xa6\xb4\x6f\xa5\x29\x26\x66\xbe\xd6\x40\x8d\x39\xa6\x67\xbe\x14\xf4\x1f\x5a\x67\x6c\x7f\x22\xbe\x35\x7c\x05\x00\x00\xff\xff\x8c\xc4\x81\x84\x5b\x02\x00\x00")

func migrations01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialUpSql,
		"migrations/01_initial.up.sql",
	)
}

func migrations01_initialUpSql() (*asset, error) {
	bytes, err := migrations01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.up.sql", size: 603, mode: os.FileMode(420), modTime: time.Unix(1609248204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.ini":                   configIni,
	"migrations/01_initial.up.sql": migrations01_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.ini": &bintree{configIni, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.up.sql": &bintree{migrations01_initialUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
